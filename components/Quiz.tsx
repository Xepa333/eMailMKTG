import React, { useState, useCallback } from 'react';
import { generateQuizQuestions } from '../services/geminiService';
import type { QuizQuestion } from '../types';

const Loader: React.FC = () => (
  <div className="flex justify-center items-center p-8">
    <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-purple-600"></div>
    <p className="ml-4 text-lg text-gray-700">Generating your questions with AI...</p>
  </div>
);

const Quiz: React.FC = () => {
  const [questions, setQuestions] = useState<QuizQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [quizState, setQuizState] = useState<'idle' | 'loading' | 'active' | 'finished'>('idle');
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
  const [error, setError] = useState<string | null>(null);

  const startQuiz = useCallback(async () => {
    setQuizState('loading');
    setError(null);
    try {
      const fetchedQuestions = await generateQuizQuestions();
      if(fetchedQuestions && fetchedQuestions.length > 0) {
        setQuestions(fetchedQuestions);
        setQuizState('active');
      } else {
        throw new Error("AI failed to generate questions. Please try again.");
      }
    } catch (e) {
      setError(e instanceof Error ? e.message : 'An unknown error occurred.');
      setQuizState('idle');
    }
  }, []);

  const handleAnswer = (answer: string) => {
    if (selectedAnswer) return; // Prevent changing answer

    setSelectedAnswer(answer);
    const correct = questions[currentQuestionIndex].correctAnswer === answer;
    setIsCorrect(correct);
    if (correct) {
      setScore(s => s + 1);
    }

    setTimeout(() => {
      if (currentQuestionIndex < questions.length - 1) {
        setCurrentQuestionIndex(i => i + 1);
        setSelectedAnswer(null);
        setIsCorrect(null);
      } else {
        setQuizState('finished');
      }
    }, 1500);
  };

  const resetQuiz = () => {
    setQuestions([]);
    setCurrentQuestionIndex(0);
    setScore(0);
    setQuizState('idle');
    setSelectedAnswer(null);
    setIsCorrect(null);
    setError(null);
  };
  
  const getButtonClass = (option: string) => {
    if (selectedAnswer) {
      if (option === questions[currentQuestionIndex].correctAnswer) {
        return 'bg-green-100 border-green-500 text-green-800';
      }
      if (option === selectedAnswer && !isCorrect) {
        return 'bg-red-100 border-red-500 text-red-800';
      }
    }
    return 'bg-white border-gray-300 hover:bg-gray-100 text-gray-700';
  };

  return (
    <div className="bg-gray-50/50 p-6 md:p-8 rounded-xl shadow-xl border border-gray-200 min-h-[30rem] flex flex-col justify-center items-center">
      {quizState === 'idle' && (
        <>
          <h3 className="text-2xl font-bold mb-4 text-center text-gray-800">Ready to test your email marketing knowledge?</h3>
          <p className="text-center mb-6 text-gray-600">Click below to start a short quiz generated by AI based on the tips you've just learned.</p>
          <button onClick={startQuiz} className="bg-yellow-400 text-gray-900 font-bold py-3 px-8 rounded-lg hover:bg-yellow-500 transition-colors text-lg">
            Start AI Quiz
          </button>
          {error && <p className="text-red-400 mt-4">{error}</p>}
        </>
      )}
      {quizState === 'loading' && <Loader />}
      {quizState === 'active' && questions.length > 0 && (
        <div className="w-full">
          <p className="text-purple-600 mb-2">Question {currentQuestionIndex + 1} of {questions.length}</p>
          <h3 className="text-xl md:text-2xl font-semibold mb-6 text-gray-800">{questions[currentQuestionIndex].question}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {questions[currentQuestionIndex].options.map(option => (
              <button key={option} onClick={() => handleAnswer(option)} disabled={!!selectedAnswer} 
                      className={`p-4 rounded-lg border-2 text-left transition-all duration-300 ${getButtonClass(option)}`}>
                {option}
              </button>
            ))}
          </div>
        </div>
      )}
      {quizState === 'finished' && (
        <div className="text-center">
          <h3 className="text-3xl font-bold mb-4 text-gray-800">Quiz Complete!</h3>
          <p className="text-xl mb-6 text-gray-700">You scored <span className="text-purple-600 font-bold text-2xl">{score}</span> out of <span className="text-purple-600 font-bold text-2xl">{questions.length}</span></p>
          <button onClick={resetQuiz} className="bg-yellow-400 text-gray-900 font-bold py-3 px-8 rounded-lg hover:bg-yellow-500 transition-colors text-lg">
            Play Again
          </button>
        </div>
      )}
    </div>
  );
};

export default Quiz;